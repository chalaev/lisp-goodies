#+TITLE: headers (defpackages)
#+AUTHOR: Oleg Shalaev
#+EMAIL:  oleg@chalaev.com

The CL-part of the code is separated in two packages (~shalaev/macros~ and ~shalaev/files~)
united by ~shalaev~, and tested by ~shalaev/tests~.

Together with [[file:shalaev.asd][shalaev.asd]] this file provides the necessary headers
merged with the main code from [[file:goodies.org][goodies.org]] by [[file:Makefile][Makefile]].

The actual tests are defined (using =deftest=) in the [[file:goodies.org][main file]];
here we just make necessary preliminary definitions.

#+BEGIN_SRC lisp :tangle generated/headers/tests.lisp
;;(in-package :cl-user)
(uiop:define-package :shalaev/tests
  (:use :cl :shalaev/macros :shalaev/files :shalaev/conf :sb-rt)
  (:export :N-failed)
#+END_SRC
Using =*compile-tests*= here: ← [[https://github.com/pbing/sb-rt/blob/master/rt.lisp][when true, compile the tests before running them]]
#+BEGIN_SRC lisp :tangle generated/headers/tests.lisp
  (:import-from :sb-rt :*compile-tests* :*expected-failures*))
(in-package :shalaev/tests)
(defvar N-failed 0 "how many tests failed")
#+END_SRC

The variable =N-failed= will be SBCL's exit code used in [[file:Makefile][Makefile]]:
#+BEGIN_SRC lisp :tangle generated/headers/tests.lisp
(defun run-tests (&key ((:compiled *compile-tests*)))
  (unless (do-tests) (incf N-failed))) 
#+END_SRC
← then, e.g., =(run-tests :compiled nil)= would set =*compile-tests*= to =nil=.

Since every lisper probably has his/her own "goodies", let me make this package unique by naming it "shalaev":
#+BEGIN_SRC lisp :tangle generated/headers/shalaev.lisp
;;(in-package :cl-user)
(uiop:define-package :shalaev
(:nicknames "sh") (:use :cl)
(:use-reexport :shalaev/macros :shalaev/files))
(in-package :shalaev)
(declaim (optimize (speed 0) (safety 3) (debug 3)))
#+END_SRC

#+BEGIN_SRC lisp :tangle generated/headers/macros.lisp
(uiop:define-package :shalaev/macros
(:nicknames "SHM")
  (:use :cl)
  (:export
:end-push :iff :ifn :concat :aset :hset
:case*  :when-let :case-expand :case-f
:if-let :ifn-let :cond-let
:needs))
(in-package :shalaev/macros)
#+END_SRC

#+BEGIN_SRC lisp :tangle generated/headers/files.lisp
(uiop:define-package :shalaev/files
  (:use :cl :shalaev/macros)
  (:export :without :drop ; ← this function(s)/macro(s) are not about files; should I rename this whole packafe or create another one?
:without-key :drop-key
:merge-paths :safe-mkdir :rmdir :echo-to-file :directory-lock))
(in-package :shalaev/files)
#+END_SRC

#+BEGIN_SRC lisp :tangle generated/headers/conf.lisp
(uiop:define-package :shalaev/conf
  (:use :cl :shalaev/macros)
  (:export :read-conf-file :rand-str :charToInt :intToChar))
(in-package :shalaev/conf)
#+END_SRC
